PatternRecognizer 1.0 by
Zakharov Konstantin aka Ralor
<e-mail:zakharov.k.l@yandex.ru>
<skype:ralor-real>

Backlog:
    - User want to recognize contour of circle, rectangle and triangle from loaded jpg, so I'm supposed to design a simple algorithms using appropriate opencv functions.
    - User want a plugin system, so I need to find some kind of architectural pattern and C++ plugins library/mechanism.
    - User want to adjust contour width and color, so there must be some kind of standart dialog window to do that and some standart painting functions.

	- (*) User want to use webcamera
	
Features:
    > (+) render image in Qt GUI
    >> set up treshold adjustment
    >> (+) paint static line on image 
    >> provide customization for line width and color
    
    > find patterns on jpg using specified treshold
    >> parse file name
	>> (+) load plugin
    >> find count of patterns on image

Waiting:
    - remember standart qt elements: adjuster, textedit, label, button, openfile dialog, color dialog
	- find an algorithm for circle
    - find an algorithm for triangle
	- find an algorithm for rectangle
	- set custom library path for app (smth like "../lib/" instead of %PATH%)
	- (*) set custom library path for plugins (instead of placing them into "../lib/")
	- make tresholdind parameters adjustable via GUI (+ autorepaint <<onRelease>>)
	- get any working plugin via IPlugin interface (to get template)
	- (*) paint plugin tester
	
WIP:
	- look at Canny results with/without tresholding
	- embed custom QWidget into usual Qt GUI
    - test found algorithms for rectangle
	- create IPlugin interface
	
DONE:
    - install opencv
    - create makefil/*.pro or smth that compiles helloworld
    -- compile shared opencv libs using cmake and WITH_QT = 1 option (what that means?)
	-- find appropriate "LIBS +=" and line
	- render image on QWidget with QPainter, paint static line on it
	- find library/mechanism for plugin loading
	- find appropriate GoF pattern for plugins (adapter IPlugin)
	
REFERENCES:

matchShapes(): http://docs.opencv.org/modules/imgproc/doc/structural_analysis_and_shape_descriptors.html

(*) opencv coding style guide: http://code.opencv.org/projects/opencv/wiki/CodingStyleGuide
(*) enable webcamera: http://robocraft.ru/blog/computervision/420.html

OVERVIEW:
    
	
LICENSE:
    This source has been released "As is", you can you use it as you want.
    See LICENSE for details.
    
COMPILING:
    Provided code was compiled with gcc 4.8.1 (tdm-2).
    See BUILDING for details.
    
NOTES:
    Please report bugs to me via email.